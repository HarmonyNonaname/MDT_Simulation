
# Use this open statement to create an OpenGL view:
/vis/open OGL 900x900-0+0
#

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointVector 1 1 1
/vis/viewer/set/lightsVector 1 1 1
#
# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
/vis/scene/add/hits
#

# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Decorations

# Axes, scale, etc.
#/vis/scene/add/scale   # Simple scale line
#/vis/scene/add/axes    # Simple axes: x=red, y=green, z=blue.
#/vis/scene/add/eventID # Drawn at end of event
#/vis/scene/add/date    # Date stamp
#

#
# To get nice view
# Make the "World" box invisible
/vis/geometry/set/visibility World 0 false

/vis/viewer/set/autoRefresh true
/vis/verbose warnings

/vis/viewer/zoom 4.0

